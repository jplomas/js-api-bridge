{"version":3,"sources":["../src/helper.js"],"names":["crypto","require","QrlAddressValidator","addr","length","address","substring","addrBuff","Buffer","from","hash","createHash","update","slice","digest","toString"],"mappings":";;;;;;;AAAA;AAEA;AAEA,IAAMA,MAAM,GAAGC,OAAO,CAAC,QAAD,CAAtB;;AAEO,SAASC,mBAAT,CAA6BC,IAA7B,EAAmC;AACxC,MAAIA,IAAI,CAACC,MAAL,KAAgB,EAApB,EAAwB,OAAO,KAAP;AAExB,MAAMC,OAAO,GAAGF,IAAI,CAACG,SAAL,CAAe,CAAf,CAAhB;AACA,MAAMC,QAAQ,GAAGC,MAAM,CAACC,IAAP,CAAYJ,OAAZ,EAAqB,KAArB,CAAjB;AAEA,MAAMK,IAAI,GAAGV,MAAM,CAACW,UAAP,CAAkB,QAAlB,EAA4BC,MAA5B,CAAmCL,QAAQ,CAACM,KAAT,CAAe,CAAf,EAAkB,EAAlB,CAAnC,CAAb;AAEA,SAAOH,IAAI,CAACI,MAAL,CAAY,KAAZ,EAAmBD,KAAnB,CAAyB,EAAzB,MAAiCN,QAAQ,CAACM,KAAT,CAAe,EAAf,EAAmBE,QAAnB,CAA4B,KAA5B,CAAxC;AACD","sourcesContent":["/* eslint import/prefer-default-export: 0 */\n\n// TODO: refactor to use validate-qrl-address\n\nconst crypto = require('crypto');\n\nexport function QrlAddressValidator(addr) {\n  if (addr.length !== 79) return false;\n\n  const address = addr.substring(1);\n  const addrBuff = Buffer.from(address, 'hex');\n\n  const hash = crypto.createHash('sha256').update(addrBuff.slice(0, 35));\n\n  return hash.digest('hex').slice(56) === addrBuff.slice(35).toString('hex');\n}\n"],"file":"helper.js"}